<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017-2019 The GreyCat Authors.  All rights reserved.
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>greycat-ml</artifactId>
    <version>20-SNAPSHOT</version>
    <name>greycat-ml</name>

    <parent>
        <artifactId>greycat-parent</artifactId>
        <groupId>com.datathings</groupId>
        <version>20-SNAPSHOT</version>
        <relativePath>../..</relativePath>
    </parent>

    <properties>
        <js.name>greycat.ml</js.name>
        <header.path>${basedir}/../../HEADER</header.path>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.datathings</groupId>
            <artifactId>greycat</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.datathings</groupId>
                <artifactId>j2ts-mavenplugin</artifactId>
                <version>${java2typescript.plugin.version}</version>
                <executions>
                    <execution>
                        <id>ts-compile-ml</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>java2ts</goal>
                        </goals>
                        <configuration>
                            <name>${js.name}</name>
                            <headers>
                                <header>import {java,Long} from '@greycat/j2ts-jre';</header>
                                <header>import * as greycat from '@greycat/greycat';</header>
                            </headers>
                            <source>${basedir}/src/main/java</source>
                            <target>${basedir}/target/generated-sources</target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>ts-compile-test-ml</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>java2ts</goal>
                        </goals>
                        <configuration>
                            <name>test</name>
                            <headers>
                                <header>import {java,Long} from '@greycat/j2ts-jre';</header>
                                <header>import {org} from '@greycat/j2ts-junit';</header>
                                <header>import * as greycat from '../classes-npm/node_modules/@greycat/greycat';
                                </header>
                                <header>import {greycatML} from '../classes-npm';</header>
                            </headers>
                            <testHeaders>
                                <testHeader>var greycatMLTest = require('../test-classes-npm');</testHeader>
                            </testHeaders>
                            <source>${basedir}/src/test/java</source>
                            <target>${basedir}/target/generated-test-sources</target>
                            <withJUnit>true</withJUnit>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <version>2.0</version>
                <executions>
                    <execution>
                        <id>main.ts.compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                //windows compat...
                                def gbasedir = basedir.getAbsolutePath().replace('\\', '/')
                                def prefix = (System.getProperty("os.name").toLowerCase().contains("win")) ? "CMD /C " : ""

                                def ant = new AntBuilder()
                                ant.copy(file: "${gbasedir}/src/main/ts/tsconfig.json", todir: "${gbasedir}/target/classes-npm")
                                ant.copy(file: "${gbasedir}/src/main/ts/package.json", todir: "${gbasedir}/target/classes-npm")
                                ant.copy(file: "${gbasedir}/src/main/ts/readme.md", todir: "${gbasedir}/target/classes-npm")
                                ant.copy(file: "${gbasedir}/target/generated-sources/greycat.ml.ts", todir: "${gbasedir}/target/classes-npm")
                                ant.replace(file: "${gbasedir}/target/classes-npm/greycat.ml.ts", token: "namespace greycat", value: "export namespace greycatML")
                                ant.replace(file: "${gbasedir}/target/classes-npm/greycat.ml.ts", token: "greycat.ml", value: "greycatML.ml")

                                def project_version = "${project.version}".replaceAll("-SNAPSHOT", "")

                                while (project_version.split('\\.').length != 3) {
                                    project_version += '.0'
                                }
                                def j2ts_version = "${java2typescript.plugin.version}".replaceAll("-SNAPSHOT", "")

                                def greycatPtr = new File("${gbasedir}/../../greycat/target/greycat-greycat-${project_version}.tgz").canonicalPath.replace('\\', '/')

                                while (j2ts_version.split('\\.').length != 3) {
                                    j2ts_version += '.0'
                                }
                                ant.replace(file: "${gbasedir}/target/classes-npm/package.json", token: "GREYCAT_VERSION_D", value: greycatPtr)
                                ant.replace(file: "${gbasedir}/target/classes-npm/package.json", token: "GREYCAT_VERSION", value: project_version)
                                ant.replace(file: "${gbasedir}/target/classes-npm/package.json", token: "J2TS_VERSION", value: j2ts_version)

                                def npmInstallProcess = (prefix + "npm install").execute(null, new File("${gbasedir}/target/classes-npm"))
                                npmInstallProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcess.exitValue() != 0) {
                                    exit
                                }

                                def tscProcess = (prefix + "node ${gbasedir}/target/classes-npm/node_modules/typescript/lib/tsc.js").execute(null, new File("${gbasedir}/target/classes-npm"))
                                tscProcess.waitForProcessOutput(System.out, System.err)
                                if (tscProcess.exitValue() != 0) {
                                    exit
                                }

                                ant.delete(file: "${gbasedir}/target/classes-npm/tsconfig.json")
                                ant.replace(file: "${gbasedir}/target/classes-npm/package.json", token: greycatPtr, value: project_version)

                                def npmPackProcess = (prefix + "npm pack classes-npm/").execute(null, new File("${gbasedir}/target/"))
                                npmPackProcess.waitForProcessOutput(System.out, System.err)
                                if (npmPackProcess.exitValue() != 0) {
                                    exit
                                }
                                project.properties.put("generatedTGZ", "greycat-ml-${project_version}".toString())
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test.ts.compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                //windows compat...
                                def gbasedir = basedir.getAbsolutePath().replace('\\', '/')
                                def prefix = (System.getProperty("os.name").toLowerCase().contains("win")) ? "CMD /C " : ""

                                def ant = new AntBuilder()
                                ant.copy(file: "${gbasedir}/src/test/ts/tsconfig.json", todir: "${gbasedir}/target/test-classes-npm")
                                ant.copy(file: "${gbasedir}/src/test/ts/package.json", todir: "${gbasedir}/target/test-classes-npm")
                                def project_version = "${project.version}".replaceAll("-SNAPSHOT", "")
                                while (project_version.split('\\.').length != 3) {
                                    project_version += '.0'
                                }
                                def j2ts_version = "${java2typescript.plugin.version}".replaceAll("-SNAPSHOT", "")
                                while (j2ts_version.split('\\.').length != 3) {
                                    j2ts_version += '.0'
                                }
                                ant.replace(file: "${gbasedir}/target/test-classes-npm/package.json", token: "GREYCAT_VERSION", value: project_version)
                                ant.replace(file: "${gbasedir}/target/test-classes-npm/package.json", token: "J2TS_VERSION", value: j2ts_version)
                                ant.copy(file: "${gbasedir}/target/generated-test-sources/test.ts", todir: "${gbasedir}/target/test-classes-npm")
                                ant.concat(append: "true", destfile: "${gbasedir}/target/test-classes-npm/test.ts", "export = greycatMLTest;")
                                ant.replace(file: "${gbasedir}/target/test-classes-npm/test.ts", token: "greycat.ml", value: "greycatML.ml")
                                def npmInstallProcess = (prefix + "npm install").execute(null, new File("${gbasedir}/target/test-classes-npm"))
                                npmInstallProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcess.exitValue() != 0) {
                                    exit
                                }
                                def tscProcess = (prefix + "node ${gbasedir}/target/test-classes-npm/node_modules/typescript/lib/tsc.js").execute(null, new File("${gbasedir}/target/test-classes-npm"))
                                tscProcess.waitForProcessOutput(System.out, System.err)
                                if (tscProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.echo("Tsc: " + tscProcess.exitValue())
                                ant.concat(append: "false", destfile: "${gbasedir}/target/test-classes-npm/jasmine.js", "var Jasmine = require('jasmine');var jasmine = new Jasmine();jasmine.execute(['testsRunner.js']);")
                                ant.copy(file: "${gbasedir}/target/generated-test-sources/testsRunner.js", todir: "${gbasedir}/target/test-classes-npm")
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>test.ts.run</id>
                        <phase>test</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                //windows compat...
                                def gbasedir = basedir.getAbsolutePath().replace('\\', '/')
                                def prefix = (System.getProperty("os.name").toLowerCase().contains("win")) ? "CMD /C " : ""

                                def jasmineProcess = (prefix + "node jasmine.js").execute(null, new File("${gbasedir}/target/test-classes-npm"))
                                jasmineProcess.waitForProcessOutput(System.out, System.err)
                                if (jasmineProcess.exitValue() != 0) {
                                    exit
                                }
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>main.ts.deploy</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                //windows compat...
                                def gbasedir = basedir.getAbsolutePath().replace('\\', '/')
                                def prefix = (System.getProperty("os.name").toLowerCase().contains("win")) ? "CMD /C " : ""
                                def npmDeployProcess = (prefix + "npm publish").execute(null, new File("${gbasedir}/target/classes-npm"))
                                npmDeployProcess.waitForProcessOutput(System.out, System.err)
                                if (npmDeployProcess.exitValue() != 0) {
                                    exit
                                }
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
