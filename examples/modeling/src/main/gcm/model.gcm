index Buildings : Building using name
index Cities    : SmartCity using myId

const GLOBAL_CONSTANT : Double = 4.5
const ANOTHER_GLOBAL_CONSTANT : String = "my_constant"
const CONSTANT_TO_OVERRIDE : String
const TASK_CONSTANT : Task

const listNodeNames : Task = readIndex("nodes").name

const isStatic : Boolean


class SmartCity {
    const listNodeNames : Task = readIndex("nodes").name
    const derivedAtt : Task = executeExpression("x + y")

    att myId : Integer
    att name : String
    att location : GPSPosition

    att taskAtt : Task

    att x : Double = 5.1
    att y : Double = 1.5

    index subCities : SmartCity using myId

}

class Building extends ASuperType {
    @timeSensitivity = (3,5)

    const BUILDING_CONSTANT : String = "bla"

    att name : String
    att houseNumber : Int = 5
    att height : Double = 3.12
    att description : String = "my_description"
    att intArr : IntArray = (3,2,3)
    att stringArr : StringArray = ("a", "b", "c", "d")

    att l2lMap : LongToLongMap = ((1,1),(2,2),(3,3))
    att l2laMap : LongToLongArrayMap = ((1,1),(1,2),(1,3))
    att i2strMap : IntToStringMap = ((1,"1"),(2,"2"))

    att dm : DMatrix = ((0,0,1),(0,1,1))

    att ndTree : NDTree = ((0,1,2,3),1,(0,0,0,0),(5,5,5,5),(0.5,0.5,0.5,0.5))

    att longToLongArrayMap : LongToLongArrayMap
    rel rooms : Room
    ref specialRoom : Room
    index localIndex : Room using name
    index floors : Floor using name oppositeOf building

    rel aaa : Floor
}

class Floor {
    att name : String
    ref building : Building oppositeOf floors

    index oi : Building using name oppositeOf aaa
}

class Room {
    att name : String
}


class ASuperType {
    @timeSensitivity = (4,5)

}

type GPSPosition extends AGPSPosition {
    const derivedAtt : Task = executeExpression("x + y")

    att lat : Double
    att lng : Double

    att i2strMap : IntToStringMap = ((1,"1"),(2,"2"))
}

type AGPSPosition {

}

class A {
    att name : String
    rel bRel : B
    rel bRel2 : B oppositeOf aRel2
}

class B {
    att name : String
    ref aRef : A oppositeOf bRel
    rel aRel2 : A oppositeOf bRel2
}

